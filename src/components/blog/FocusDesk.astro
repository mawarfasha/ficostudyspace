---
import Title from "@components/global/Title.astro";
import { getLangFromUrl, useTranslations } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<!-- Yellow Blob Cursor Follower -->
<div id="cursor-follower" data-xdata="{ isTouchDevice: 'ontouchstart' in window }" data-xshow="!isTouchDevice">
	<div id="blob" class="blob"></div>
</div>

<section>
	<div class="top-[-10rem]transform-gpu absolute inset-x-0 overflow-hidden blur-3xl sm:top-[-20rem]" aria-hidden="true">
		<div class="gradient-element"></div>
	</div>
	<div class="mx-auto flex flex-col gap-16 px-8 py-12 md:px-12 lg:pt-16 2xl:max-w-7xl">
		<!-- svg: first layer -->
		<svg class="hidden" viewBox="0 0 250 250" xmlns="http://www.w3.org/2000/svg">
			<filter id="article-noise-filter">
				<feTurbulence type="fractalNoise" baseFrequency="0.8" numOctaves="3" stitchTiles="stitch"></feTurbulence>
			</filter>
		</svg>
		
		<Title title="Focus Mode" subtitle="Your Digital Study Desk" class="pb-6 pt-8 uppercase" />
		
		<!-- Main Content Area -->
		<div class="grid grid-cols-1 lg:grid-cols-3 gap-8 min-h-[600px]">
			<!-- Focus Monitor & Notes - Left Side (2/3 width) -->
			<div class="lg:col-span-2 space-y-6">
				<!-- Large Camera Feed Section -->
				<div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
					<h3 class="text-2xl font-semibold mb-6 text-black text-center">Focus Monitor</h3>
					
					<!-- Camera Display - Much Larger -->
					<div class="relative bg-black/50 rounded-lg overflow-hidden mb-6 aspect-video h-96">
						<video id="cameraFeed" autoplay muted class="w-full h-full object-cover camera-mirrored"></video>
						<div id="cameraPlaceholder" class="absolute inset-0 flex items-center justify-center text-white/60">
							<div class="text-center">
								<svg class="w-24 h-24 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M4 5a2 2 0 00-2 2v6a2 2 0 002 2h12a2 2 0 002-2V7a2 2 0 00-2-2h-1.586l-.707-.707A1 1 0 0013 4H7a1 1 0 00-.707.293L5.586 5H4zm6 9a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"></path>
								</svg>
								<p class="text-lg">Camera Disabled</p>
							</div>
						</div>
					</div>

					<!-- Camera Controls -->
                     
					<div class="flex justify-center mb-4">
						<button id="toggleCamera" class="squircle-bg rounded-lg bg-zinc-900 text-white transition-all hover:bg-slate-200 hover:text-black py-3 px-6 text-lg font-medium" data-cursor-hover data-cursor-parallax disabled>
						Enable Camera
					</button>
					</div>
					
					<!-- Timelapse Controls -->
					<div class="space-y-4 mb-4">
						<div>
							<label class="block text-sm font-medium text-black/80 mb-2">Capture Interval</label>
							<div class="flex items-center gap-3">
								<input type="range" id="intervalSlider" min="100" max="5000" value="1000" 
									class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
								<span id="intervalValue" class="text-sm font-medium text-black min-w-[60px]">1.0s</span>
							</div>
						</div>
						<div>
							<label class="block text-sm font-medium text-black/80 mb-2">Playback Speed</label>
							<div class="flex items-center gap-3">
								<input type="range" id="speedSlider" min="5" max="60" value="30" 
									class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
								<span id="speedValue" class="text-sm font-medium text-black min-w-[60px]">30 FPS</span>
							</div>
						</div>
					</div>
					
					<div class="grid grid-cols-2 gap-4 mb-4">
						<button id="startTimelapse" class="squircle-bg rounded-lg bg-green-600 text-white transition-all hover:bg-slate-200 hover:text-black py-3 px-6 text-lg font-medium" data-cursor-hover data-cursor-parallax disabled>
							▶ Start Timelapse
						</button>
						<button id="stopTimelapse" class="squircle-bg rounded-lg bg-red-600 text-white transition-all hover:bg-slate-200 hover:text-black py-3 px-6 text-lg font-medium" data-cursor-hover data-cursor-parallax disabled>
							⏹ Stop Timelapse
						</button>
					</div>
					
					<button id="downloadTimelapse" class="w-full squircle-bg rounded-lg bg-blue-600 text-white transition-all hover:bg-slate-200 hover:text-black py-3 px-6 text-lg font-medium mb-4" disabled>
						Download Latest
					</button>
					
					<p class="text-sm text-black/50 text-center">Monitor your focus and posture during study sessions</p>
				</div>

				<!-- Session Notes -->
				<!-- <div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
					<h3 class="text-xl font-semibold mb-4 text-black">Session Notes</h3>
					<textarea 
						placeholder="Take notes during your focus session..."
						class="w-full h-64 bg-white border border-gray-300 rounded-md px-3 py-2 text-black placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
					></textarea>
					<div class="mt-4 flex justify-between items-center">
						<span class="text-sm text-black/60" id="charCount">0 characters</span>
						<button class="squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-slate-200 hover:text-black px-4 py-2">
							Save Notes
						</button>
					</div>
				</div> -->

				<!-- Study Session Info -->
				<!-- <div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
					<h3 class="text-xl font-semibold mb-4 text-black">Current Session</h3>
					<div class="grid grid-cols-2 gap-4">
						<div>
							<label class="block text-sm font-medium text-black/80 mb-2">Session Type</label>
							<select class="w-full bg-white border border-gray-300 rounded-md px-3 py-2 text-black focus:outline-none focus:ring-2 focus:ring-blue-500">
								<option value="study">Study Session</option>
								<option value="work">Work Session</option>
								<option value="creative">Creative Work</option>
								<option value="reading">Reading</option>
							</select>
						</div>
						<div>
							<label class="block text-sm font-medium text-black/80 mb-2">Session Goal</label>
							<input type="text" placeholder="e.g., Complete Chapter 3" class="w-full bg-white border border-gray-300 rounded-md px-3 py-2 text-black placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500">
						</div>
					</div>
				</div> -->
			</div>

			<!-- Right Sidebar - Timer & Controls (1/3 width) -->
			<div class="space-y-6">
				<!-- Timer Section -->
				<div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
					<h3 class="text-xl font-semibold mb-4 text-black text-center">Focus Timer</h3>
					
					<!-- Timer Display -->
					<div class="text-center mb-6">
						<div class="text-4xl font-mono font-bold text-black mb-2" id="timerDisplay">25:00</div>
						<div class="text-sm text-black/60" id="timerStatus">Ready to start</div>
					</div>

					<!-- Timer Presets -->
					<div class="grid grid-cols-3 gap-2 mb-4">
						<button class="preset-btn squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-slate-200 hover:text-black py-2 px-2 text-sm" data-minutes="25">
							25m
						</button>
						<button class="preset-btn squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-slate-200 hover:text-black py-2 px-2 text-sm" data-minutes="45">
							45m
						</button>
						<button class="preset-btn squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-slate-200 hover:text-black py-2 px-2 text-sm" data-minutes="60">
							60m
						</button>
					</div>

					<!-- Timer Controls -->
					<div class="space-y-2">
						<button id="startBtn" class="w-full squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-slate-200 hover:text-black py-2 px-4" data-cursor-hover data-cursor-parallax>
							Start
						</button>
						<button id="pauseBtn" class="w-full squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-slate-200 hover:text-black py-2 px-4" data-cursor-hover data-cursor-parallax disabled>
							Pause
						</button>
						<button id="resetBtn" class="w-full squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-slate-200 hover:text-black py-2 px-4" data-cursor-hover data-cursor-parallax>
							Reset
						</button>
					</div>
				</div>

				<!-- Session Stats -->
				<div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
					<h3 class="text-xl font-semibold mb-4 text-black">Today's Progress</h3>
					<div class="space-y-4">
						<div class="text-center">
							<div class="text-2xl font-bold text-black" id="sessionsCompleted">0</div>
							<div class="text-sm text-black/60">Sessions Completed</div>
						</div>
						<div class="text-center">
							<div class="text-2xl font-bold text-black" id="totalFocusTime">0m</div>
							<div class="text-sm text-black/60">Focus Time</div>
						</div>
						<div class="text-center">
							<div class="text-2xl font-bold text-black" id="currentStreak">0</div>
							<div class="text-sm text-black/60">Day Streak</div>
						</div>
					</div>
				</div>

				<!-- Quick Actions -->
				<!-- <div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
					<h3 class="text-xl font-semibold mb-4 text-black text-center">Quick Actions</h3>
					<div class="space-y-2">
						<button class="w-full squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-slate-200 hover:text-black py-2 px-4">
							Break Time
						</button>
						<button class="w-full squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-slate-200 hover:text-black py-2 px-4">
							Background Sounds
						</button>
						<button class="w-full squircle-bg rounded-lg bg-zinc-900 text-slate-200 transition-all hover:bg-slate-200 hover:text-black py-2 px-4">
							Do Not Disturb
						</button>
					</div>
				</div> -->
			</div>
		</div>
		
		<!-- Recordings Section -->
		<div class="-mt-8">
			<div class="bg-white/90 backdrop-blur-md rounded-lg p-6 border border-gray/20">
				<h3 class="text-xl font-semibold mb-4 text-black text-center">Recent Time-lapses</h3>
				<div id="recordingsList" class="space-y-4">
					<p class="text-center text-black/60 py-8">
						No recordings yet. Start your first time-lapse above!
					</p>
				</div>
			</div>
		</div>
	</div>
</section>

<style>
	.gradient-element {
		@apply relative left-1/2 -z-10 aspect-[1155/678] w-[36.125rem] max-w-none -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[#a2d4a0] to-[#aac887] opacity-30 sm:left-[calc(50%-40rem)] sm:w-[72.1875rem];
		clip-path: polygon(
			74.1% 44.1%,
			100% 61.6%,
			97.5% 26.9%,
			85.5% 0.1%,
			80.7% 2%,
			72.5% 32.5%,
			60.2% 62.4%,
			52.4% 68.1%,
			47.5% 58.3%,
			45.2% 34.5%,
			27.5% 76.7%,
			0.1% 64.9%,
			17.9% 100%,
			27.6% 76.8%,
			76.1% 97.7%,
			74.1% 44.1%
		);
	}

	/* Yellow Blob Cursor Follower Styles */
	#cursor-follower {
		position: fixed;
		top: 0;
		left: 0;
		opacity: 0;
		height: 100vh;
		width: 100vw;
		transition: opacity 0.2s ease-in-out 1s;
		pointer-events: none;
		z-index: 10;
	}

	@keyframes fadeIn {
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}

	#cursor-follower.active {
		animation: fadeIn 2s forwards;
	}

	#blob {
		position: fixed;
		border-radius: 50px;
		filter: blur(50px);
		opacity: 0.2;
		top: 0;
		left: 0;
		height: 200px;
		width: 200px;
		background-color: #edb74d;
		transform: scale(0.5) translate(-50%, -50%);
		pointer-events: none;
		will-change: transform;
	}

	/* Camera mirroring */
	.camera-mirrored {
		transform: scaleX(-1);
	}
</style>

<script is:inline>
	// Yellow Blob Cursor Follower functionality
	function initBlobCursor() {
		const isTouchDevice = window.matchMedia("(hover: none)").matches;
		if (isTouchDevice) return;

		var mouse = { x: 0, y: 0 };
		var pos = { x: 0, y: 0 };
		var ratio = 0.65;
		var blob = document.getElementById("blob");
		var magicCursor = document.getElementById("cursor-follower");

		if (!blob || !magicCursor) {
			console.log('Blob elements not found:', { blob: !!blob, magicCursor: !!magicCursor });
			return;
		}

		console.log('Initializing blob cursor...');

		// Set initial position
		blob.style.transform = 'translate(-50%, -50%)';

		document.addEventListener("mousemove", mouseMove);

		function updatePosition() {
			pos.x += (mouse.x - pos.x) * ratio;
			pos.y += (mouse.y - pos.y) * ratio;
			blob.style.transform = `translate(${pos.x}px, ${pos.y}px) translate(-50%, -50%)`;
		}

		function mouseMove(e) {
			var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
			mouse.x = e.pageX;
			mouse.y = e.pageY - scrollTop;
		}

		// Use requestAnimationFrame instead of GSAP ticker
		function animate() {
			updatePosition();
			requestAnimationFrame(animate);
		}
		animate();

		// Add hover effects for interactive elements
		let parallaxWraps = document.querySelectorAll("[data-cursor-hover]");
		console.log('Found hover elements:', parallaxWraps.length);
		
		parallaxWraps.forEach(function (wrap) {
			wrap.addEventListener("mouseenter", function (e) {
				blob.style.opacity = '0.5';
				blob.style.transition = 'opacity 0.5s ease';
			});

			wrap.addEventListener("mouseleave", function (e) {
				blob.style.opacity = '0.2';
				blob.style.transition = 'opacity 0.5s ease';
				
				if (wrap && wrap.hasAttribute("data-cursor-parallax")) {
					wrap.style.transform = 'scale(1) translate(0px, 0px)';
					wrap.style.transition = 'transform 0.3s ease';
				}
			});

			wrap.addEventListener("mousemove", function (e) {
				if (wrap && wrap.hasAttribute("data-cursor-parallax")) {
					var boundingRect = wrap.getBoundingClientRect();
					var relX = e.pageX - boundingRect.left;
					var relY = e.pageY - boundingRect.top;
					var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
					
					var movement = 10;
					var x = ((relX - boundingRect.width / 2) / boundingRect.width) * movement;
					var y = ((relY - boundingRect.height / 2 - scrollTop) / boundingRect.height) * movement;
					
					wrap.style.transform = `translate(${x}px, ${y}px)`;
					wrap.style.transition = 'transform 0.3s ease';
				}
			});
		});

		magicCursor.classList.add("active");
		console.log('Blob cursor initialized successfully');
	}

	// Plain JavaScript implementation for better Astro compatibility
	class TimeLapseRecorder {
		constructor() {
			console.log('TimeLapseRecorder constructor starting...');
			
			// DOM elements
			this.video = document.getElementById('cameraFeed');
			this.startBtn = document.getElementById('startTimelapse');
			this.stopBtn = document.getElementById('stopTimelapse');
			this.downloadBtn = document.getElementById('downloadTimelapse');
			this.toggleCameraBtn = document.getElementById('toggleCamera');
			this.intervalSlider = document.getElementById('intervalSlider');
			this.speedSlider = document.getElementById('speedSlider');
			this.intervalValue = document.getElementById('intervalValue');
			this.speedValue = document.getElementById('speedValue');
			this.recordingsList = document.getElementById('recordingsList');
			this.cameraPlaceholder = document.getElementById('cameraPlaceholder');

			console.log('Elements found:', {
				video: !!this.video,
				startBtn: !!this.startBtn,
				stopBtn: !!this.stopBtn,
				downloadBtn: !!this.downloadBtn,
				toggleCameraBtn: !!this.toggleCameraBtn,
				intervalSlider: !!this.intervalSlider,
				speedSlider: !!this.speedSlider
			});

			// State
			this.mediaRecorder = null;
			this.stream = null;
			this.canvas = document.createElement('canvas');
			this.ctx = this.canvas.getContext('2d');
			this.frames = [];
			this.isRecording = false;
			this.captureInterval = null;
			this.recordings = [];
			this.cameraEnabled = false;

			this.init();
		}

		async init() {
			console.log('Initializing TimeLapseRecorder...');
			this.setupEventListeners();
			this.loadRecordings(); // Load saved recordings
			this.updateUI(); // Enable buttons initially
			this.updateStatus('📷 Camera Ready - Click "Enable Camera" to start');
		}

		setupEventListeners() {
			console.log('Setting up event listeners...');
			
			if (this.toggleCameraBtn) {
				console.log('Adding click listener to toggleCamera button');
				this.toggleCameraBtn.addEventListener('click', () => {
					console.log('Toggle camera clicked');
					this.toggleCamera();
				});
			}

			if (this.startBtn) {
				this.startBtn.addEventListener('click', () => {
					console.log('Start timelapse clicked');
					this.startRecording();
				});
			}

			if (this.stopBtn) {
				this.stopBtn.addEventListener('click', () => {
					console.log('Stop timelapse clicked');
					this.stopRecording();
				});
			}

			if (this.downloadBtn) {
				this.downloadBtn.addEventListener('click', () => {
					console.log('Download clicked');
					this.downloadLatest();
				});
			}

			if (this.intervalSlider) {
				this.intervalSlider.addEventListener('input', (e) => {
					const value = parseInt(e.target.value);
					if (this.intervalValue) {
						this.intervalValue.textContent = (value / 1000).toFixed(1) + 's';
					}
				});
			}

			if (this.speedSlider) {
				this.speedSlider.addEventListener('input', (e) => {
					const value = parseInt(e.target.value);
					if (this.speedValue) {
						this.speedValue.textContent = value + ' FPS';
					}
				});
			}
		}

		async toggleCamera() {
			console.log('toggleCamera called, cameraEnabled:', this.cameraEnabled);
			
			if (!this.cameraEnabled) {
				try {
					console.log('Requesting camera access...');
					this.stream = await navigator.mediaDevices.getUserMedia({
						video: { width: 1280, height: 720 },
						audio: false
					});
					
					console.log('Camera access granted');
					
					if (this.video) {
						this.video.srcObject = this.stream;
						this.video.style.display = 'block';
					}
					
					if (this.cameraPlaceholder) {
						this.cameraPlaceholder.style.display = 'none';
					}
					
					if (this.toggleCameraBtn) {
						this.toggleCameraBtn.textContent = 'Disable Camera';
						this.toggleCameraBtn.className = this.toggleCameraBtn.className.replace('bg-zinc-900', 'bg-red-600');
					}
					
					this.cameraEnabled = true;
					this.updateUI();
					this.updateStatus('✅ Camera connected successfully!');
					
				} catch (error) {
					console.error('Camera access error:', error);
					this.updateStatus('❌ Camera access denied. Please allow camera permissions.');
				}
			} else {
				console.log('Disabling camera...');
				// Disable camera
				if (this.stream) {
					this.stream.getTracks().forEach(track => track.stop());
					this.stream = null;
				}
				
				if (this.video) {
					this.video.style.display = 'none';
				}
				
				if (this.cameraPlaceholder) {
					this.cameraPlaceholder.style.display = 'flex';
				}
				
				if (this.toggleCameraBtn) {
					this.toggleCameraBtn.textContent = 'Enable Camera';
					this.toggleCameraBtn.className = this.toggleCameraBtn.className.replace('bg-red-600', 'bg-zinc-900');
				}
				
				this.cameraEnabled = false;
				
				// Stop recording if active
				if (this.isRecording) {
					this.stopRecording();
				}
				
				this.updateUI();
				this.updateStatus('📷 Camera disabled');
			}
		}

		startRecording() {
			console.log('startRecording called');
			if (this.isRecording || !this.cameraEnabled) {
				console.log('Cannot start - isRecording:', this.isRecording, 'cameraEnabled:', this.cameraEnabled);
				return;
			}

			this.isRecording = true;
			this.frames = [];
			const interval = this.intervalSlider ? parseInt(this.intervalSlider.value) : 1000;

			if (this.video && this.ctx) {
				this.canvas.width = this.video.videoWidth;
				this.canvas.height = this.video.videoHeight;

				this.captureInterval = setInterval(() => {
					this.captureFrame();
				}, interval);

				this.updateUI();
				this.updateStatus(`🎬 Recording started! Capturing every ${(interval/1000).toFixed(1)}s`);
			}
		}

		captureFrame() {
			if (!this.isRecording || !this.ctx || !this.video) return;

			// Save the context state
			this.ctx.save();
			
			// Mirror the image horizontally (flip)
			this.ctx.scale(-1, 1);
			this.ctx.drawImage(this.video, -this.canvas.width, 0, this.canvas.width, this.canvas.height);
			
			// Restore the context state
			this.ctx.restore();
			
			const frameData = this.canvas.toDataURL('image/jpeg', 0.8);
			this.frames.push(frameData);
			
			// Update start button text with frame count
			if (this.startBtn) {
				this.startBtn.textContent = `🔴 Recording... (${this.frames.length} frames)`;
			}
			
			this.updateStatus(`📸 Recording... ${this.frames.length} frames captured`);
		}

		async stopRecording() {
			console.log('stopRecording called');
			if (!this.isRecording) return;

			this.isRecording = false;
			if (this.captureInterval) {
				clearInterval(this.captureInterval);
			}

			if (this.frames.length === 0) {
				this.updateStatus('⚠️ No frames captured. Try recording for a longer duration.');
				this.updateUI();
				return;
			}

			this.updateStatus('⏳ Processing time-lapse video...');
			await this.createTimeLapse();
			this.updateUI();
		}

		async createTimeLapse() {
			console.log('createTimeLapse called');
			return new Promise((resolve) => {
				const fps = this.speedSlider ? parseInt(this.speedSlider.value) : 30;
				const frameDuration = 1000 / fps;

				if (!this.ctx) {
					resolve();
					return;
				}

				const mediaRecorder = new MediaRecorder(this.canvas.captureStream(fps), {
					mimeType: 'video/webm'
				});

				const chunks = [];
				mediaRecorder.ondataavailable = (e) => chunks.push(e.data);
				mediaRecorder.onstop = () => {
					const blob = new Blob(chunks, { type: 'video/webm' });
					const url = URL.createObjectURL(blob);
					
					const recording = {
						id: Date.now(),
						url: url,
						blob: blob,
						timestamp: new Date(),
						frameCount: this.frames.length,
						fps: fps,
						duration: (this.frames.length / fps).toFixed(1)
					};

					this.recordings.unshift(recording);
					this.saveRecordings(); // Save to localStorage
					this.updateRecordingsList();
					this.updateStatus(`✨ Time-lapse created! ${this.frames.length} frames at ${fps}fps`);
					resolve();
				};

				mediaRecorder.start();

				let frameIndex = 0;
				const playFrames = () => {
					if (frameIndex < this.frames.length && this.ctx) {
						const img = new Image();
						img.onload = () => {
							if (this.ctx) {
								this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
								
								// Since frames are already mirrored when captured, draw them normally
								this.ctx.drawImage(img, 0, 0);
								frameIndex++;
								setTimeout(playFrames, frameDuration);
							}
						};
						img.src = this.frames[frameIndex];
					} else {
						mediaRecorder.stop();
					}
				};

				setTimeout(playFrames, 100);
			});
		}

		updateRecordingsList() {
			if (!this.recordingsList) return;

			if (this.recordings.length === 0) {
				this.recordingsList.innerHTML = `
					<p class="text-center text-black/60 py-8">
						No recordings yet. Start your first time-lapse above! 🎥
					</p>
				`;
				return;
			}

			this.recordingsList.innerHTML = this.recordings.map(recording => {
				const hasVideo = recording.url ? true : false;
				const videoElement = hasVideo 
					? `<video class="w-20 h-15 rounded object-cover" src="${recording.url}" muted loop autoplay></video>`
					: `<div class="w-20 h-15 rounded bg-gray-300 flex items-center justify-center">
						<svg class="w-8 h-8 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
							<path d="M2 6a2 2 0 012-2h6l2 2h6a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM5 8a1 1 0 000 2h8a1 1 0 100-2H5z"></path>
						</svg>
					</div>`;

				const downloadButton = hasVideo 
					? `<button onclick="timeLapse.downloadRecording(${recording.id})" 
							class="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-slate-200 hover:text-black">
						💾 Download
					</button>`
					: `<button disabled class="px-3 py-1 bg-gray-400 text-white rounded text-sm cursor-not-allowed">
						💾 Not Available
					</button>`;

				const playButton = hasVideo 
					? `<button onclick="timeLapse.playRecording(${recording.id})" 
							class="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-slate-200 hover:text-black">
						▶️ Play
					</button>`
					: `<button disabled class="px-3 py-1 bg-gray-400 text-white rounded text-sm cursor-not-allowed">
						▶️ Not Available
					</button>`;

				return `
					<div class="flex items-center gap-4 p-4 bg-white/50 rounded-lg border border-gray-200">
						${videoElement}
						<div class="flex-1">
							<div class="font-semibold text-black">Time-lapse ${recording.id}</div>
							<div class="text-sm text-black/60">
								${recording.frameCount} frames • ${recording.fps}fps • ${recording.duration}s<br>
								Created: ${recording.timestamp.toLocaleString()}
								${!hasVideo ? '<br><span class="text-orange-600">⚠️ Video not available (from previous session)</span>' : ''}
							</div>
						</div>
						<div class="flex gap-2">
							${downloadButton}
							${playButton}
							<button onclick="timeLapse.deleteRecording(${recording.id})" 
									class="px-3 py-1 bg-red-600 text-white rounded text-sm hover:bg-slate-200 hover:text-black">
								🗑️ Delete
							</button>
						</div>
					</div>
				`;
			}).join('');
		}

		downloadRecording(id) {
			const recording = this.recordings.find(r => r.id === id);
			if (!recording) return;

			const a = document.createElement('a');
			a.href = recording.url;
			a.download = `timelapse-${recording.id}.webm`;
			document.body.appendChild(a);
			a.click();
			document.body.removeChild(a);
		}

		playRecording(id) {
			const recording = this.recordings.find(r => r.id === id);
			if (!recording) return;

			const modal = document.createElement('div');
			modal.style.cssText = `
				position: fixed; top: 0; left: 0; width: 100%; height: 100%;
				background: rgba(0,0,0,0.9); display: flex; align-items: center;
				justify-content: center; z-index: 1000; backdrop-filter: blur(5px);
			`;
			
			modal.innerHTML = `
				<div style="max-width: 90%; max-height: 90%; position: relative;">
					<video controls autoplay style="width: 100%; height: auto; border-radius: 10px; max-height: 80vh;">
						<source src="${recording.url}" type="video/webm">
					</video>
					<button onclick="this.parentElement.parentElement.remove()" 
							style="position: absolute; top: -40px; right: 0; background: white; 
								   border: none; border-radius: 50%; width: 30px; height: 30px; 
								   cursor: pointer; font-size: 18px; font-weight: bold;">×</button>
					<div style="color: white; text-align: center; margin-top: 10px; font-size: 14px;">
						${recording.frameCount} frames • ${recording.fps}fps • ${recording.duration}s
					</div>
				</div>
			`;
			
			document.body.appendChild(modal);
			modal.addEventListener('click', (e) => {
				if (e.target === modal) modal.remove();
			});
		}

		downloadLatest() {
			console.log('downloadLatest called');
			if (this.recordings.length > 0) {
				this.downloadRecording(this.recordings[0].id);
			}
		}

		updateUI() {
			console.log('updateUI called');
			if (this.toggleCameraBtn) {
				this.toggleCameraBtn.disabled = false;
				console.log('Camera button enabled');
			}
			
			if (this.startBtn) {
				this.startBtn.disabled = this.isRecording || !this.cameraEnabled;
				if (!this.isRecording) {
					this.startBtn.textContent = '▶ Start Timelapse';
				}
			}
			
			if (this.stopBtn) {
				this.stopBtn.disabled = !this.isRecording;
			}
			
			if (this.downloadBtn) {
				this.downloadBtn.disabled = this.recordings.length === 0;
			}
		}

		// LocalStorage methods for recordings persistence
		saveRecordings() {
			try {
				// We can't save blob URLs, so we'll save recording metadata
				const recordingsToSave = this.recordings.map(recording => ({
					id: recording.id,
					timestamp: recording.timestamp.toISOString(),
					frameCount: recording.frameCount,
					fps: recording.fps,
					duration: recording.duration
				}));
				localStorage.setItem('focusDesk_recordings', JSON.stringify(recordingsToSave));
				console.log('Recordings saved to localStorage');
			} catch (error) {
				console.error('Error saving recordings:', error);
			}
		}

		loadRecordings() {
			try {
				const savedRecordings = localStorage.getItem('focusDesk_recordings');
				if (savedRecordings) {
					const recordingsData = JSON.parse(savedRecordings);
					// Note: We can't restore blob URLs, so we'll just show the metadata
					this.recordings = recordingsData.map(data => ({
						...data,
						timestamp: new Date(data.timestamp),
						url: null, // URL will be null for loaded recordings
						blob: null // Blob will be null for loaded recordings
					}));
					console.log('Loaded recordings from localStorage:', this.recordings.length);
					this.updateRecordingsList();
				}
			} catch (error) {
				console.error('Error loading recordings:', error);
			}
		}

		deleteRecording(id) {
			this.recordings = this.recordings.filter(r => r.id !== id);
			this.saveRecordings();
			this.updateRecordingsList();
			this.updateUI();
		}

		updateStatus(message) {
			console.log('Status:', message);
		}
	}

	class FocusDesk {
		constructor() {
			// Timer state
			this.timer = null;
			this.timeRemaining = 25 * 60; // 25 minutes in seconds
			this.isRunning = false;

			this.initializeElements();
			this.setupEventListeners();
			this.loadStats();
		}

		initializeElements() {
			this.updateTimerDisplay();
		}

		setupEventListeners() {
			// Timer controls
			const startBtn = document.getElementById('startBtn');
			const pauseBtn = document.getElementById('pauseBtn');
			const resetBtn = document.getElementById('resetBtn');
			
			if (startBtn) startBtn.addEventListener('click', () => this.startTimer());
			if (pauseBtn) pauseBtn.addEventListener('click', () => this.pauseTimer());
			if (resetBtn) resetBtn.addEventListener('click', () => this.resetTimer());

			// Timer presets
			document.querySelectorAll('.preset-btn').forEach(btn => {
				btn.addEventListener('click', (e) => {
					const minutes = parseInt(e.target.dataset.minutes || '25');
					this.setTimer(minutes);
				});
			});

			// Notes character count
			const notesTextarea = document.querySelector('textarea');
			if (notesTextarea) {
				notesTextarea.addEventListener('input', () => {
					const charCount = document.getElementById('charCount');
					if (charCount) {
						charCount.textContent = `${notesTextarea.value.length} characters`;
					}
				});
			}
		}

		setTimer(minutes) {
			this.timeRemaining = minutes * 60;
			this.updateTimerDisplay();
			if (this.isRunning) {
				this.pauseTimer();
			}
		}

		startTimer() {
			if (!this.isRunning) {
				this.isRunning = true;
				this.timer = setInterval(() => {
					this.timeRemaining--;
					this.updateTimerDisplay();
					
					if (this.timeRemaining <= 0) {
						this.completeSession();
					}
				}, 1000);

				this.updateControls();
				this.updateTimerStatus('Focus time! Stay concentrated.');
			}
		}

		pauseTimer() {
			if (this.isRunning && this.timer) {
				this.isRunning = false;
				clearInterval(this.timer);
				this.timer = null;
				this.updateControls();
				this.updateTimerStatus('Timer paused');
			}
		}

		resetTimer() {
			if (this.timer) {
				clearInterval(this.timer);
				this.timer = null;
			}
			this.isRunning = false;
			this.timeRemaining = 25 * 60;
			this.updateTimerDisplay();
			this.updateControls();
			this.updateTimerStatus('Ready to start');
		}

		completeSession() {
			if (this.timer) {
				clearInterval(this.timer);
				this.timer = null;
			}
			this.isRunning = false;
			this.updateControls();
			this.updateTimerStatus('Session completed! Great work!');
			this.incrementStats();
			
			// Show completion notification
			if (Notification.permission === 'granted') {
				new Notification('Focus Session Complete!', {
					body: 'Great job! You completed your focus session.',
					icon: '/favicon.ico'
				});
			}
		}

		updateTimerDisplay() {
			const minutes = Math.floor(this.timeRemaining / 60);
			const seconds = this.timeRemaining % 60;
			const display = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
			
			const timerDisplay = document.getElementById('timerDisplay');
			if (timerDisplay) {
				timerDisplay.textContent = display;
			}
		}

		updateTimerStatus(status) {
			const statusElement = document.getElementById('timerStatus');
			if (statusElement) {
				statusElement.textContent = status;
			}
		}

		updateControls() {
			const startBtn = document.getElementById('startBtn');
			const pauseBtn = document.getElementById('pauseBtn');
			
			if (startBtn && pauseBtn) {
				startBtn.disabled = this.isRunning;
				pauseBtn.disabled = !this.isRunning;
			}
		}

		loadStats() {
			const today = new Date().toDateString();
			const lastActiveDate = localStorage.getItem('focusDesk_lastActiveDate');
			
			// Check if streak should be reset
			let currentStreak = parseInt(localStorage.getItem('focusDesk_currentStreak') || '0');
			
			if (lastActiveDate) {
				const lastDate = new Date(lastActiveDate);
				const todayDate = new Date(today);
				const daysDiff = Math.floor((todayDate - lastDate) / (1000 * 60 * 60 * 24));
				
				if (daysDiff > 1) {
					// More than 1 day gap, reset streak
					currentStreak = 0;
					localStorage.setItem('focusDesk_currentStreak', '0');
				}
			}

			// Load stats from localStorage or set defaults
			const stats = {
				sessionsCompleted: parseInt(localStorage.getItem('focusDesk_sessionsCompleted') || '0'),
				totalFocusTime: parseInt(localStorage.getItem('focusDesk_totalFocusTime') || '0'),
				currentStreak: currentStreak,
				todaySessions: this.getTodaySessions()
			};

			this.updateStatsDisplay(stats);
		}

		getTodaySessions() {
			const today = new Date().toDateString();
			const todaySessionsData = localStorage.getItem('focusDesk_todaySessions');
			
			if (todaySessionsData) {
				const data = JSON.parse(todaySessionsData);
				if (data.date === today) {
					return data.count;
				}
			}
			return 0;
		}

		incrementStats() {
			const today = new Date().toDateString();
			const lastActiveDate = localStorage.getItem('focusDesk_lastActiveDate');
			
			// Update today's sessions
			const todaySessions = this.getTodaySessions() + 1;
			localStorage.setItem('focusDesk_todaySessions', JSON.stringify({
				date: today,
				count: todaySessions
			}));

			// Handle streak logic
			let currentStreak = parseInt(localStorage.getItem('focusDesk_currentStreak') || '0');
			
			if (lastActiveDate) {
				const lastDate = new Date(lastActiveDate);
				const todayDate = new Date(today);
				const daysDiff = Math.floor((todayDate - lastDate) / (1000 * 60 * 60 * 24));
				
				if (daysDiff === 1) {
					// Consecutive day, increment streak
					currentStreak += 1;
				} else if (daysDiff === 0) {
					// Same day, keep streak (don't increment)
				} else {
					// Gap in days, start new streak
					currentStreak = 1;
				}
			} else {
				// First time, start streak
				currentStreak = 1;
			}

			const currentStats = {
				sessionsCompleted: parseInt(localStorage.getItem('focusDesk_sessionsCompleted') || '0') + 1,
				totalFocusTime: parseInt(localStorage.getItem('focusDesk_totalFocusTime') || '0') + 25,
				currentStreak: currentStreak,
				todaySessions: todaySessions
			};

			// Save to localStorage
			localStorage.setItem('focusDesk_sessionsCompleted', currentStats.sessionsCompleted.toString());
			localStorage.setItem('focusDesk_totalFocusTime', currentStats.totalFocusTime.toString());
			localStorage.setItem('focusDesk_currentStreak', currentStats.currentStreak.toString());
			localStorage.setItem('focusDesk_lastActiveDate', today);

			this.updateStatsDisplay(currentStats);
			
			// Show achievement notifications
			this.showAchievements(currentStats);
		}

		showAchievements(stats) {
			// Show achievement notifications for milestones
			if (stats.sessionsCompleted % 10 === 0) {
				this.showNotification(`🎉 Milestone reached! ${stats.sessionsCompleted} sessions completed!`);
			}
			
			if (stats.currentStreak === 7) {
				this.showNotification(`🔥 Amazing! You've got a 7-day streak!`);
			} else if (stats.currentStreak === 30) {
				this.showNotification(`🏆 Incredible! 30-day streak achieved!`);
			} else if (stats.currentStreak > 0 && stats.currentStreak % 5 === 0) {
				this.showNotification(`⭐ Great job! ${stats.currentStreak}-day streak!`);
			}
		}

		showNotification(message) {
			if (Notification.permission === 'granted') {
				new Notification('Focus Desk Achievement!', {
					body: message,
					icon: '/favicon.ico'
				});
			}
		}

		updateStatsDisplay(stats) {
			const sessionsElement = document.getElementById('sessionsCompleted');
			const focusTimeElement = document.getElementById('totalFocusTime');
			const streakElement = document.getElementById('currentStreak');

			if (sessionsElement) sessionsElement.textContent = stats.sessionsCompleted.toString();
			if (focusTimeElement) focusTimeElement.textContent = `${stats.totalFocusTime}m`;
			if (streakElement) streakElement.textContent = stats.currentStreak.toString();
		}
	}

	// Initialize when DOM is loaded
	document.addEventListener('DOMContentLoaded', () => {
		console.log('DOM loaded, initializing...');
		
		// Initialize blob cursor first
		try {
			initBlobCursor();
			console.log('BlobCursor initialized');
		} catch (error) {
			console.error('Error initializing BlobCursor:', error);
		}
		
		try {
			window.timeLapse = new TimeLapseRecorder();
			console.log('TimeLapseRecorder initialized');
		} catch (error) {
			console.error('Error initializing TimeLapseRecorder:', error);
		}
		
		try {
			window.focusDesk = new FocusDesk();
			console.log('FocusDesk initialized');
		} catch (error) {
			console.error('Error initializing FocusDesk:', error);
		}
		
		// Request notification permission
		if ('Notification' in window && Notification.permission === 'default') {
			Notification.requestPermission();
		}
	});
</script>
